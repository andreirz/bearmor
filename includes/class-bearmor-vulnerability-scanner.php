<?php
/**
 * Vulnerability Scanner Class
 * Scans plugins and themes for known vulnerabilities
 *
 * @package Bearmor_Security
 */

class Bearmor_Vulnerability_Scanner {

	/**
	 * Initialize hooks
	 */
	public static function init() {
		// Schedule daily vulnerability scan
		add_action( 'bearmor_daily_vulnerability_scan', array( __CLASS__, 'scan_all' ) );
		
		if ( ! wp_next_scheduled( 'bearmor_daily_vulnerability_scan' ) ) {
			wp_schedule_event( time(), 'daily', 'bearmor_daily_vulnerability_scan' );
		}
	}

	/**
	 * Scan all plugins and themes
	 *
	 * @param bool $force_refresh Skip cache and force fresh API calls
	 */
	public static function scan_all( $force_refresh = false ) {
		// If force refresh, delete all existing vulnerabilities to rescan fresh
		if ( $force_refresh ) {
			global $wpdb;
			$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
			$wpdb->query( "DELETE FROM $table_name WHERE status = 'active'" );
		}
		
		// Clear old vulnerabilities
		self::clear_old_vulnerabilities();
		
		// Scan plugins
		self::scan_plugins( $force_refresh );
		
		// Scan themes
		self::scan_themes( $force_refresh );
		
		// Send email notification for critical vulnerabilities
		self::send_critical_notification();
		
		// Update last scan time
		update_option( 'bearmor_last_vulnerability_scan', current_time( 'mysql' ) );
	}

	/**
	 * Scan all active plugins
	 *
	 * @param bool $force_refresh Skip cache
	 */
	public static function scan_plugins( $force_refresh = false ) {
		if ( ! function_exists( 'get_plugins' ) ) {
			require_once ABSPATH . 'wp-admin/includes/plugin.php';
		}
		
		$all_plugins = get_plugins();
		$active_plugins = get_option( 'active_plugins', array() );
		
		error_log( 'BEARMOR VULN: Scanning ' . count( $active_plugins ) . ' active plugins' );
		
		foreach ( $active_plugins as $plugin_file ) {
			if ( ! isset( $all_plugins[ $plugin_file ] ) ) {
				continue;
			}
			
			$plugin_data = $all_plugins[ $plugin_file ];
			
			// Get plugin slug from directory name
			$slug = dirname( $plugin_file );
			
			// Skip if no slug (single-file plugin)
			if ( $slug === '.' ) {
				$slug = basename( $plugin_file, '.php' );
			}
			
			$version = $plugin_data['Version'];
			$name = $plugin_data['Name'];
			
			error_log( 'BEARMOR VULN: Checking ' . $name . ' (slug: ' . $slug . ', version: ' . $version . ')' );
			
			// Check for vulnerabilities
			$result = Bearmor_WPVulnerability_API::check_plugin( $slug, $version, $force_refresh );
			
			if ( is_wp_error( $result ) ) {
				error_log( 'BEARMOR VULN: Error for ' . $slug . ': ' . $result->get_error_message() );
				continue;
			}
			
			error_log( 'BEARMOR VULN: Found ' . count( $result['vulnerabilities'] ) . ' vulnerabilities for ' . $slug );
			
			if ( ! empty( $result['vulnerabilities'] ) ) {
				foreach ( $result['vulnerabilities'] as $vuln ) {
					self::save_vulnerability( $slug, $name, $version, 'plugin', $vuln );
				}
			}
		}
	}

	/**
	 * Scan all themes (only active theme)
	 *
	 * @param bool $force_refresh Skip cache
	 */
	public static function scan_themes( $force_refresh = false ) {
		$active_theme = wp_get_theme();
		
		$slug = $active_theme->get_stylesheet();
		$name = $active_theme->get( 'Name' );
		$version = $active_theme->get( 'Version' );
		
		// Check for vulnerabilities
		$result = Bearmor_WPVulnerability_API::check_theme( $slug, $version, $force_refresh );
		
		if ( is_wp_error( $result ) ) {
			return;
		}
		
		if ( ! empty( $result['vulnerabilities'] ) ) {
			foreach ( $result['vulnerabilities'] as $vuln ) {
				self::save_vulnerability( $slug, $name, $version, 'theme', $vuln );
			}
		}
	}

	/**
	 * Save vulnerability to database
	 */
	private static function save_vulnerability( $slug, $name, $version, $type, $vuln ) {
		global $wpdb;
		$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
		
		// Check if already exists
		$exists = $wpdb->get_var( $wpdb->prepare(
			"SELECT id FROM $table_name 
			WHERE item_slug = %s 
			AND item_version = %s 
			AND title = %s 
			AND status != 'whitelisted'",
			$slug,
			$version,
			$vuln['title']
		) );
		
		if ( $exists ) {
			return; // Already logged
		}
		
		// Insert vulnerability
		$wpdb->insert(
			$table_name,
			array(
				'item_slug'       => $slug,
				'item_name'       => $name,
				'item_version'    => $version,
				'item_type'       => $type,
				'severity'        => $vuln['severity'],
				'title'           => $vuln['title'],
				'description'     => $vuln['description'],
				'fixed_in'        => $vuln['fixed_in'],
				'cve_references'  => $vuln['cve_references'],
				'detected_at'     => current_time( 'mysql' ),
				'status'          => 'active',
			),
			array( '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s' )
		);
	}

	/**
	 * Clear old vulnerabilities (fixed or no longer installed)
	 */
	private static function clear_old_vulnerabilities() {
		global $wpdb;
		$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
		
		// Get all active vulnerabilities
		$vulnerabilities = $wpdb->get_results(
			"SELECT * FROM $table_name WHERE status = 'active'"
		);
		
		if ( ! function_exists( 'get_plugins' ) ) {
			require_once ABSPATH . 'wp-admin/includes/plugin.php';
		}
		
		$all_plugins = get_plugins();
		$active_plugins = get_option( 'active_plugins', array() );
		$active_theme = wp_get_theme();
		
		foreach ( $vulnerabilities as $vuln ) {
			$still_vulnerable = false;
			
			if ( $vuln->item_type === 'plugin' ) {
				// Check if plugin still installed and active
				foreach ( $active_plugins as $plugin_file ) {
					$slug = dirname( $plugin_file );
					if ( $slug === '.' ) {
						$slug = basename( $plugin_file, '.php' );
					}
					
					if ( $slug === $vuln->item_slug && isset( $all_plugins[ $plugin_file ] ) ) {
						$current_version = $all_plugins[ $plugin_file ]['Version'];
						
						// Check if still vulnerable
						if ( empty( $vuln->fixed_in ) || version_compare( $current_version, $vuln->fixed_in, '<' ) ) {
							$still_vulnerable = true;
							break;
						}
					}
				}
			} elseif ( $vuln->item_type === 'theme' ) {
				// Check if theme still active
				if ( $active_theme->get_stylesheet() === $vuln->item_slug ) {
					$current_version = $active_theme->get( 'Version' );
					
					// Check if still vulnerable
					if ( empty( $vuln->fixed_in ) || version_compare( $current_version, $vuln->fixed_in, '<' ) ) {
						$still_vulnerable = true;
					}
				}
			}
			
			// Mark as fixed if no longer vulnerable
			if ( ! $still_vulnerable ) {
				$wpdb->update(
					$table_name,
					array( 'status' => 'fixed' ),
					array( 'id' => $vuln->id ),
					array( '%s' ),
					array( '%d' )
				);
			}
		}
	}

	/**
	 * Get all vulnerabilities
	 */
	public static function get_vulnerabilities( $args = array() ) {
		global $wpdb;
		$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
		
		$defaults = array(
			'status'   => 'active',
			'severity' => null,
			'type'     => null,
		);
		
		$args = wp_parse_args( $args, $defaults );
		
		$where = array();
		
		if ( $args['status'] ) {
			$where[] = $wpdb->prepare( 'status = %s', $args['status'] );
		}
		
		if ( $args['severity'] ) {
			$where[] = $wpdb->prepare( 'severity = %s', $args['severity'] );
		}
		
		if ( $args['type'] ) {
			$where[] = $wpdb->prepare( 'item_type = %s', $args['type'] );
		}
		
		$where_sql = ! empty( $where ) ? 'WHERE ' . implode( ' AND ', $where ) : '';
		
		return $wpdb->get_results(
			"SELECT * FROM $table_name $where_sql ORDER BY 
			FIELD(severity, 'critical', 'high', 'medium', 'low'), 
			detected_at DESC"
		);
	}

	/**
	 * Get vulnerability count by severity
	 */
	public static function get_count_by_severity() {
		global $wpdb;
		$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
		
		$results = $wpdb->get_results(
			"SELECT severity, COUNT(*) as count 
			FROM $table_name 
			WHERE status = 'active' 
			GROUP BY severity"
		);
		
		$counts = array(
			'critical' => 0,
			'high'     => 0,
			'medium'   => 0,
			'low'      => 0,
			'total'    => 0,
		);
		
		foreach ( $results as $row ) {
			$counts[ $row->severity ] = (int) $row->count;
			$counts['total'] += (int) $row->count;
		}
		
		return $counts;
	}

	/**
	 * Whitelist a vulnerability
	 */
	public static function whitelist_vulnerability( $id ) {
		global $wpdb;
		$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
		
		return $wpdb->update(
			$table_name,
			array( 'status' => 'whitelisted' ),
			array( 'id' => $id ),
			array( '%s' ),
			array( '%d' )
		);
	}

	/**
	 * Get last scan time
	 */
	public static function get_last_scan_time() {
		return get_option( 'bearmor_last_vulnerability_scan', false );
	}

	/**
	 * Send email notification for critical vulnerabilities
	 */
	private static function send_critical_notification() {
		global $wpdb;
		$table_name = $wpdb->prefix . 'bearmor_vulnerabilities';
		
		// Get critical vulnerabilities
		$critical = $wpdb->get_results(
			"SELECT * FROM $table_name 
			WHERE status = 'active' 
			AND severity = 'critical' 
			ORDER BY detected_at DESC"
		);
		
		if ( empty( $critical ) ) {
			return; // No critical vulnerabilities
		}
		
		// Check if we already notified about these
		$notified = get_option( 'bearmor_notified_vulns', array() );
		$new_critical = array();
		
		foreach ( $critical as $vuln ) {
			if ( ! in_array( $vuln->id, $notified ) ) {
				$new_critical[] = $vuln;
				$notified[] = $vuln->id;
			}
		}
		
		if ( empty( $new_critical ) ) {
			return; // Already notified about all
		}
		
		// Update notified list
		update_option( 'bearmor_notified_vulns', $notified );
		
		// Send email
		$admin_email = get_option( 'admin_email' );
		$site_name = get_bloginfo( 'name' );
		$subject = sprintf( '[%s] ðŸ”´ Critical Security Vulnerabilities Detected', $site_name );
		
		$message = "Critical security vulnerabilities have been detected on your WordPress site:\n\n";
		$message .= "Site: " . get_site_url() . "\n";
		$message .= "Detected: " . current_time( 'Y-m-d H:i:s' ) . "\n\n";
		$message .= "CRITICAL VULNERABILITIES:\n";
		$message .= str_repeat( '=', 60 ) . "\n\n";
		
		foreach ( $new_critical as $vuln ) {
			$message .= "Plugin/Theme: {$vuln->item_name} (v{$vuln->item_version})\n";
			$message .= "Vulnerability: {$vuln->title}\n";
			if ( $vuln->fixed_in ) {
				$message .= "Fixed in: v{$vuln->fixed_in}\n";
			}
			if ( $vuln->description ) {
				$message .= "Description: " . wp_strip_all_tags( $vuln->description ) . "\n";
			}
			$message .= "\n";
		}
		
		$message .= str_repeat( '=', 60 ) . "\n\n";
		$message .= "IMMEDIATE ACTION REQUIRED:\n";
		$message .= "1. Update the affected plugins/themes immediately\n";
		$message .= "2. If updates are not available, disable the vulnerable plugins\n";
		$message .= "3. Review the vulnerabilities: " . admin_url( 'admin.php?page=bearmor-vulnerabilities' ) . "\n\n";
		$message .= "This is an automated security alert from Bearmor Security.\n";
		
		wp_mail( $admin_email, $subject, $message );
	}
}
